generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String    @id @default(uuid())
  name        String
  email       String    @unique
  password    String
  bio         String?
  role        String
  createdAt   DateTime  @default(now())

  offers      Offer[]
  sentMessages     Message[] @relation("SentMessages")
  receivedMessages Message[] @relation("ReceivedMessages")
  reviewsGiven     Review[] @relation("ReviewsGiven")
  reviewsReceived  Review[] @relation("ReviewsReceived")
  matchesAsStudent Match[]  @relation("MatchesAsStudent")
  matchesAsTutor   Match[]  @relation("MatchesAsTutor")
  eventsOrganized  Event[]
  eventParticipants EventParticipant[]
  uploadedFiles     File[]
  addedResources    Resource[] @relation("AddedBy")
  logs              UserResourceLog[]
  emotionLabels     EmotionLabel[] @relation("EmotionLabelsByUser")
}

model Subject {
  id       String   @id @default(uuid())
  name     String   @unique
  offers   Offer[]
  matches  Match[]
  events   Event[]
  resources Resource[]
  tags     SubjectTag[]
}

model Offer {
  id            String   @id @default(uuid())
  userId        String
  subjectId     String?
  description   String
  availableDays String?
  availableHours String?
  price         Float?
  createdAt     DateTime @default(now())

  user    User    @relation(fields: [userId], references: [id])
  subject Subject? @relation(fields: [subjectId], references: [id])
}

model Match {
  id         String   @id @default(uuid())
  studentId  String
  tutorId    String
  subjectId  String?
  status     String   @default("pending")
  createdAt  DateTime @default(now())

  student  User    @relation("MatchesAsStudent", fields: [studentId], references: [id])
  tutor    User    @relation("MatchesAsTutor", fields: [tutorId], references: [id])
  subject  Subject? @relation(fields: [subjectId], references: [id])
}

model Message {
  id         String   @id @default(uuid())
  senderId   String
  receiverId String
  content    String
  sentAt     DateTime @default(now())

  sender   User @relation("SentMessages", fields: [senderId], references: [id])
  receiver User @relation("ReceivedMessages", fields: [receiverId], references: [id])
  emotionLabels EmotionLabel[]
}

model Review {
  id         String   @id @default(uuid())
  reviewerId String
  revieweeId String
  rating     Int?
  comment    String?
  createdAt  DateTime @default(now())

  reviewer User @relation("ReviewsGiven", fields: [reviewerId], references: [id])
  reviewee User @relation("ReviewsReceived", fields: [revieweeId], references: [id])
}

model Event {
  id            String   @id @default(uuid())
  title         String
  description   String?
  organizerId   String
  subjectId     String?
  scheduledFor  DateTime
  createdAt     DateTime @default(now())

  organizer User    @relation(fields: [organizerId], references: [id])
  subject   Subject? @relation(fields: [subjectId], references: [id])
  participants EventParticipant[]
}

model EventParticipant {
  eventId String
  userId  String

  event Event @relation(fields: [eventId], references: [id])
  user  User  @relation(fields: [userId], references: [id])

  @@id([eventId, userId])
}

model File {
  id         String   @id @default(uuid())
  uploaderId String
  name       String
  path       String   @unique
  type       String?
  size       Int?
  uploadedAt DateTime @default(now())

  uploader User @relation(fields: [uploaderId], references: [id])
  resources Resource[]
}

model Resource {
  id         String   @id @default(uuid())
  subjectId  String
  title      String
  description String?
  fileId     String?
  addedById  String?
  createdAt  DateTime @default(now())

  subject Subject @relation(fields: [subjectId], references: [id])
  file    File?   @relation(fields: [fileId], references: [id])
  addedBy User?   @relation("AddedBy", fields: [addedById], references: [id])
}

model UserResourceLog {
  id         String   @id @default(uuid())
  userId     String
  type       String
  action     String
  value      Int
  createdAt  DateTime @default(now())

  user User @relation(fields: [userId], references: [id])
}

model Tag {
  id    String   @id @default(uuid())
  name  String   @unique
  type  String?
  subjects SubjectTag[]
}

model SubjectTag {
  subjectId String
  tagId     String

  subject Subject @relation(fields: [subjectId], references: [id])
  tag     Tag     @relation(fields: [tagId], references: [id])

  @@id([subjectId, tagId])
}

model EmotionLabel {
  id         String   @id @default(uuid())
  messageId  String
  emotion    String
  labeledById String
  createdAt  DateTime @default(now())

  message Message @relation(fields: [messageId], references: [id])
  labeledBy User  @relation("EmotionLabelsByUser", fields: [labeledById], references: [id])
}